          Must Read and Agreement for Community Users

1. Basic description of system functions

    Users can use this DAPP system to publish articles, replies, pictures, and videos; they can create profile data; they can follow other users.
    All these data are stored in two locations:
    1. Articles, replies, pictures, videos, their own data will be stored in the blocks of BTC, ETH, EOS and other public blockchains in the form of remarks of blockchain transfer transactions, and cannot be modified or deleted, it will be permanently saved on the public blockchain. If the public blockchain can survive forever, these data will also survive forever.
    2. Articles, replies, pictures, videos, their catalog data are all stored in the RAM of the EOS public blockchain. The user's profile data and the data that users follow each other are also stored in the RAM of the EOS public blockchain.

    The role of two different location data:
    1. The data stored in the blocks of BTC, ETH, EOS and other public blockchains are static, unmodifiable, and undeletable.
    2. The catalog data, user profile data, and the data that users follow each other stored in the RAM of the EOS public blockchain provide users with an entry for query and access.

2. Community use norms

    When using this DAPP system, users must abide by the following rules:
    2.1 It is not allowed to publish content that violates the relevant laws and regulations of all countries in the world. It is not allowed to publish content that violates relevant international treaties or rules.
    2.2 It is not allowed to publish content that contains racial discrimination, religious discrimination, false, fraudulent, leaking of others' privacy, pornography, obscene, violent and bloody content. It is not allowed to publish any other illegal or unethical content.
    2.3 It is not allowed to publish garbage content without any practical significance for the purpose of consuming the RAM of EOS public blockchain.

    If the content posted by the user violates the above rules, we will delete the catalog data of these illegal content from the RAM of the EOS public blockchain. Users will not be able to access these illegal contents through this DAPP system. All illegal data stored in the RAM of the EOS public blockchain will be deleted.

3. Environment dependency: EOS RAM

    Since the RAM resources of the EOS public blockchain are limited and expensive, the EOS RAM owned by this DAPP system may be used up one day in the future. If this happens, in order for users to continue to use the functions of posting articles, replies, pictures, and videos, there will be three ways:
    3.1 When users perform operations that require EOS RAMs consumption, they should purchase the required EOS RAMs by themselves.
    3.2 The project team purchases more EOS RAMs for this DAPP system.
    3.3 Cancel the function of users to create profile data and cancel the function of users following each other. Existing user profile data and user followed data will be deleted to free up EOS RAMs. The released EOS RAMs will be used to save the catalog data of new articles, new replies, new pictures, and new videos published by users.

    Which way to be used depends on the situation at that time, each way is possible.

4. Environment dependency: Full node of public blockchain, Public query API service

4.1 Full node of public blockchain
    There are generally two types of nodes that make up a public blockchain network: full nodes and light nodes. The difference between the two is that the full node saves all historical block data from the genesis block to the latest block. The light node may only save the blocks in the most recent period, but not all the historical blocks.
    The data of articles, replies, pictures, and videos published by users through this DAPP system are scattered and stored in many historical blocks. If only light nodes are left running in the network of a certain public blockchain in the future, and there are no full nodes keep running, the data saved by users may be lost. Of course, this is very unlikely to happen.
    Therefore, the data stored in the blocks of public blockchain by the user through this DAPP system will not be lost, depend on that the public blockchain must have a certain number of full nodes.

4.2 Public query API service
    The method for users to query the data stored in the blocks of public blockchain through the DAPP system is to query through the transaction hash of each transaction, and they need to use the public query API service provided by relevant nodes or service providers.
    Users query the data stored in EOS RAM through the DAPP system, also need to use the public query API service provided by relevant nodes or service providers.
    If there is no public query API service provided by relevant nodes or service providers, users will not be able to easily and quickly access the data in the DAPP system, but can only use the initial method to manually query through the blockchain browser. All data can be found, but the efficiency may be very low.
    In the future, if conditions permit, we will establish a corresponding public query API service to provide users with convenient and fast query services.

5. Function implementation principle of long data stored into blocks of public blockchain

    Assume that the length of an article is 100,000 bytes, which exceeds the maximum length allowed by the remark of blockchain transfer transaction.
    First: split this article into 1000 segments of 100 bytes each. Number the 1000 segments from 1 to 1000.
    Send the first blockchain transfer transaction: take the last segment of the article, which is the 1000th segment, as the remark of this transfer transaction, in the form of "{}the 1000th segment of the article", submit it to the chain, and then get The HASH of this transfer transaction, which is recorded as HASH1000.
    Send the second blockchain transfer transaction: connect the content of the penultimate segment of the article, that is, segment 999, with the HASH1000 obtained above, take the form of "{HASH1000}the 999th segment of the article" as the remark of the transfer transaction, submit it to the chain, and then obtain the hash of the transfer transaction, which is recorded as HASH999.
    Send the third blockchain transfer transaction: connect the content of the third segment from last of the article, that is, segment 998, with the HASH999 obtained above, take the form of "{HASH999}the 998th segment of the article" as the remark of the transfer transaction, submit it to the chain, and then obtain the hash of the transfer transaction, which is recorded as HASH998.
    ......
    ......
    ......
    By analogy, the 1000 segments of the article are sent in reverse order, starting from the last segment, and sending transfer transaction one by one until the first segment of the article is sent. Here is the last transaction:
    Send the 1000th blockchain transfer transaction: connect the content of segment 1 of the article with the HASH2 obtained from the previous transfer transaction, take the form of "{HASH2}the first segment of the article" as the remark of this transfer transaction, submit it to the chain, and then obtain the hash of this transfer transaction, which is recorded as HASH1.
    At this point, the content of all 1000 segments of the article has been saved into blocks of public blockchain.
    Save HASH1 and some other related data to EOS RAM to form the catalog of this article. The DAPP system calls HASH1 as the HEAD HASH.

    When viewing the content of this article, users only need to know the HEAD HASH, that is, HASH1.
    Query the transaction corresponding to HASH1 through the blockchain browser. Its transaction remark is as follows: {HASH2}the first segment of the article.
    Then query the transaction corresponding to HASH2. Its transaction remark is as follows: {HASH3}the second segment of the article.
    Then query the transaction corresponding to HASH3. Its transaction remark is as follows: {HASH4}the third segment of the article.
    Then query the transaction corresponding to HASH4. Its transaction remark is as follows: {HASH5}the 4th segment of the article.
    Then query the transaction corresponding to HASH5. Its transaction remark is as follows: {HASH6}the 5th segment of the article.
    ...... and so on ......
    Then query the transaction corresponding to HASH998. Its transaction remark is as follows: {HASH999}the 998th segment of the article.
    Then query the transaction corresponding to HASH999. Its transaction remark is as follows: {HASH1000}the 999th segment of the article.
    Then query the transaction corresponding to HASH1000. Its transaction remark is as follows: {}the 1000th segment of the article.
    In the above query process, if one remark of transaction is started with {}, it means that the remark of transaction correspond to the last segment of the article, and the query process can be stopped accordingly.

    The process of long data stored into blocks is shown as follows: (from TOP to BOTTOM)

    {empty here}the 1000th segment of the article        --->  HASH1000        (The last segment of the article)
    { HASH 1000}the  999th segment of the article        --->  HASH 999
    { HASH  999}the  998th segment of the article        --->  HASH 998
    { HASH  998}the  997th segment of the article        --->  HASH 997
    { HASH  997}the  996th segment of the article        --->  HASH 996
    ......
    ......
    ......
    { HASH    6}the    5th segment of the article        --->  HASH   5
    { HASH    5}the    4th segment of the article        --->  HASH   4
    { HASH    4}the  third segment of the article        --->  HASH   3
    { HASH    3}the second segment of the article        --->  HASH   2
    { HASH    2}the  first segment of the article        --->  HASH   1        (The first segment of the article, store the HASH1 into EOS RAM as HEAD HASH)

    The query process is from BOTTOM to TOP. You just have to get HEAD HASH from EOS RAM, then you can query transaction one by one, and finally get the content of the whole article.

    The method of long data stored into blocks of public blockchain, we call it as "decentralized reverse chained storage method". Using this method, data of any length can be distributed and stored into multiple blocks in the form of blockchain transfer transaction remarks. Just save the HEAD HASH in another convenient query location, and you can query all the data of this long data through the blockchain browser at any time.

