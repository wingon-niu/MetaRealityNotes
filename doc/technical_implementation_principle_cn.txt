
1. 技术实现原理：如何将长数据存储到区块链的区块之中

    假设一篇文章的长度为100000个字节，超出了区块链转账交易的备注允许的最大长度。
    首先将这篇文章拆分为1000段，每段100个字节。将这1000个段，从1到1000进行编号。
    发送第1笔区块链转账交易，将文章的最后一段也就是第1000段的内容，以"{}文章第1000段内容"的形式，作为本次转账交易的备注，提交上链，然后获取本次转账交易的HASH，记为：HASH1000。
    发送第2笔区块链转账交易，将文章的倒数第二段也就是第999段的内容，与上面获取到的HASH1000连接起来，以"{HASH1000}文章第999段内容"的形式，作为本次转账交易的备注，提交上链，然后获取本次转账交易的HASH，记为：HASH999。
    发送第3笔区块链转账交易，将文章的倒数第三段也就是第998段的内容，与上面获取到的HASH999连接起来，以"{HASH999}文章第998段内容"的形式，作为本次转账交易的备注，提交上链，然后获取本次转账交易的HASH，记为：HASH998。
    ......
    ......
    ......
    以此类推，将这1000段文章按照倒过来的顺序，从最后一段开始，一段一段地发送转账交易，直到发送文章的第1段。也就是下面的这个交易：
    发送第1000笔区块链转账交易，将文章的第1段的内容，与前一笔转账交易获取到的HASH2连接起来，以"{HASH2}文章第1段内容"的形式，作为本次转账交易的备注，提交上链，然后获取本次转账交易的HASH，记为：HASH1。
    到此，所有1000段文章的内容都已经上链进入区块。
    将HASH1和一些其它的相关数据保存到EOS内存中，形成这篇文章的目录。本DAPP系统将HASH1称为首HASH。

    用户查看这篇文章的内容时，只需要知道首HASH，也即HASH1。
    通过区块链浏览器，查询HASH1对应的交易，它的交易备注是这样的：{HASH2}文章第1段内容。
    再查询HASH2对应的交易，它的交易备注是这样的：{HASH3}文章第2段内容。
    再查询HASH3对应的交易，它的交易备注是这样的：{HASH4}文章第3段内容。
    再查询HASH4对应的交易，它的交易备注是这样的：{HASH5}文章第4段内容。
    再查询HASH5对应的交易，它的交易备注是这样的：{HASH6}文章第5段内容。
    ......以此类推......
    再查询HASH998对应的交易，它的交易备注是这样的：{HASH999}文章第998段内容。
    再查询HASH999对应的交易，它的交易备注是这样的：{HASH1000}文章第999段内容。
    再查询HASH1000对应的交易，它的交易备注是这样的：{}文章第1000段内容。
    在上述的查询过程中，如果一个交易查询出来的交易备注，是以{}开头的，则说明这个交易备注对应的是文章的最后一段，可以据此停止查询进程。

    上链过程示意如下：(从上往下进行)

    { 此处空的 }文章第1000段  --->  HASH1000          文章的最后一段。
    { HASH 1000}文章第 999段  --->  HASH 999
    { HASH  999}文章第 998段  --->  HASH 998
    { HASH  998}文章第 997段  --->  HASH 997
    { HASH  997}文章第 996段  --->  HASH 996
    ......
    ......
    ......
    { HASH    6}文章第   5段  --->  HASH   5
    { HASH    5}文章第   4段  --->  HASH   4
    { HASH    4}文章第   3段  --->  HASH   3
    { HASH    3}文章第   2段  --->  HASH   2
    { HASH    2}文章第   1段  --->  HASH   1          文章的第1段，将最后的首HASH存入EOS内存。

    查询过程与上链过程相反，从下往上进行。只需要从EOS内存中查询到首HASH，就可以逐个查询，最终得到整篇文章的内容。

    我们将这个长数据上链的方法，称之为"分散逆向链式存储法"。使用此方法，可以将任意长度的数据以区块链转账交易备注的形式，分散保存到多个转账交易的区块中。只需要将首HASH保存在另外一个方便查询的位置，就可以随时通过区块链浏览器查询到这个长数据包含的所有数据。

